<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:PII_E13.ClassLibrary.AdaptadorDeTelegram">
            <summary>
            Contiene la información relevante de un mensaje de Telegram.
            Se aplica el patrón Adapter para crear esta clase y desacoplar la información de la API de Telegram.
            Pegamos ISP
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.AdaptadorDeTelegram.#ctor(Telegram.Bot.Types.Message)">
            <summary>
             Constructor de la clase utilizando un <see cref="T:Telegram.Bot.Types.Message"/> de Telegram.
             <param name="mensaje">Mensaje de Telegram.</param>
             </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.AdaptadorDeTelegram.#ctor(Telegram.Bot.Types.CallbackQuery)">
            <summary>
             Constructor de la clase utilizando una <see cref="T:Telegram.Bot.Types.CallbackQuery"/> de Telegram.
             <param name="callbackQuery">CallbackQuery de Telegram.</param>
             </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.AdaptadorDeTelegram.Texto">
            <summary>
            Obtiene el texto del mensaje.
            </summary>
            <value>Texto de un mensaje de Telegram</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.AdaptadorDeTelegram.IdChat">
            <summary>
            Obtiene la Id en Telegram del chat donde se envió mensaje.
            </summary>
            <value>Id en Telegram de un chat</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.AdaptadorDeTelegram.IdUsuario">
            <summary>
            Obtiene la Id en Telegram del usuario que envió el mensaje.
            </summary>
            <value>Id en Telegram de un usuario</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.AdaptadorDeTelegram.IdMensaje">
            <summary>
            Obtiene la Id en Telegram del usuario que envió el mensaje.
            </summary>
            <value>Id en Telegram de un usuario</value>
        </member>
        <member name="T:PII_E13.ClassLibrary.AdaptadorLocacion">
            <summary>
             Patrones y principios utilizados en esta clase:
            Expert conocer la informacion de las ubicaciones a las cuales se desea calcular distancias u obtner coordenadas.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.AdaptadorLocacion.ObtenerDistancia(PII_E13.ClassLibrary.Ubicacion,PII_E13.ClassLibrary.Ubicacion)">
            <summary>
            Sirve para obtener la distancia entre dos ubicaciones.
            </summary>
            <param name="primaria">ubicacion primaria</param>
            <param name="secundaria">ubicacion secundaria</param>
            <returns></returns>
        </member>
        <member name="T:PII_E13.ClassLibrary.Buscador">
            <summary>
            Esta es una clase auxiliar que permite la búsqueda de ofertas. Se aplica SRP para tomar la decisión de separar esta responsabilidad de Sistema,
            ya que la forma en que se realiza esta búsqueda puede cambiar y Sistema puede tener otros motivos para ser modificada.
            Se aplica el patrón Singleton dentro de esta clase para permitir solo la creación y utilización de una instancia de Buscador.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Buscador.#ctor">
            <summary>
            Crea una instancia de Buscador.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Buscador.BuscarOfertas(PII_E13.ClassLibrary.Sistema,PII_E13.ClassLibrary.Emprendedor,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Realiza una búsqueda de ofertas dentro de una instancia de Sistema, utilizando la información de un Emprendedor dado,
            junto a una lista de etiquetas y categorías, para filtrar dentro de las ofertas.
            </summary>
            <param name="sistema">Instancia de Sistema.</param>
            <param name="emprendedor">Emprendedor cuyas propiedades se utilizan para filtrar.</param>
            <param name="etiquetas">Lista de etiquetas a utilizar para filtrar.</param>
            <param name="categorias">Lista de categorías a utilizar para filtrar.</param>
            <returns>Lista de ofertas ordenadas según la relevancia calculada para la búsqueda.</returns>
        </member>
        <member name="M:PII_E13.ClassLibrary.Buscador.OrdenarOfertasPorPuntaje(System.Collections.Generic.Dictionary{PII_E13.ClassLibrary.Oferta,System.Int32})">
            <summary>
            Ordena un diccionario de par <c>Oferta, int</c> de mayor a menor según el valor asignado a cada clave.
            </summary>
            <param name="ofertas">Dictionary de par <c>Oferta, int</c> a ordenar.</param>
            <returns><c>List de Ofertas</c> ordenadas de mayor a menor.</returns>
        </member>
        <member name="M:PII_E13.ClassLibrary.Buscador.DistanciaAPuntaje(System.Double,System.Int32,System.Int32)">
            <summary>
            Calcula el puntaje asignado a una oferta según una distancia dada, con la fórmula:
            <c>puntaje = 30 - Math.Ceiling(distancia / (distanciaMáxima / puntajeMáximo))</c>
            </summary>
            <param name="distancia">Distancia hacia la oferta.</param>
            <param name="distanciaMax">Distancia máxima para asignar un puntaje. Si la distancia supera (o es igual) a la distancia máxima, el puntaje será 0.</param>
            <param name="puntajeMax">Puntaje máximo asignable.</param>
            <returns><c>Puntaje en int</c> para la distancia según las condiciones definidas.</returns>
        </member>
        <member name="P:PII_E13.ClassLibrary.Buscador.Instancia">
            <summary>
            Instancia del buscador durante la ejecución. Se aplica el patrón Singleton.
            </summary>
            <value>Una única instancia de <c>Buscador</c></value>
        </member>
        <member name="T:PII_E13.ClassLibrary.Emprendedor">
            <summary>
            Esta clase respresenta los datos basicos y necesarios que todo Emprendedor tiene, además de sus responsabilidades asignadas.
            </summary>
            Patrones y principios:
               Cumple con SRP porque solo se identifica una razón de cambio: algún cambio en la lógica de las ofertas.
               Cumple con OSP porque está abierta a la extención y cerrada a la modificación.
               Cumple con Expert porque tiene toda la información necesaria para poder cumplir con la responsabilidad de dar de alta un emprendedor y consumir ofertas.
        </member>
        <member name="P:PII_E13.ClassLibrary.Emprendedor.Id">
            <summary>
            Se indica el <value>Id</value> en Telegram del emprendedor.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Emprendedor.Nombre">
            <summary>
            Se indica el <value>Nombre</value> del emprendedor.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Emprendedor.Habilitaciones">
            <summary>
            Mediante una lista de <value>Habilitaciones</value> indicaremos todas las habiltiaciones con las que el emprendedor cuenta.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Emprendedor.Ubicacion">
            <summary>
            Se indica la <value>Ubicacion</value> del emprendedor.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Emprendedor.Rubro">
            <summary>
            Mediante una lista de <value>Rubo</value> indicaremos los rubros en el que el emprendedor se maneja.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Emprendedor.OfertasPostuladas">
            <summary>
            Mediante una lista de <value>Ofertas</value> indicaremos las ofertas a las cual se postuló.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Emprendedor.OfertasConsumidas">
            <summary>
            Mediante una lista de <value>Ofertas</value> indicaremos las ofertas consumidas a las cual se postuló.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Emprendedor.#ctor(System.String,System.String,System.Collections.Generic.List{PII_E13.ClassLibrary.Habilitacion},System.String,System.String,System.String)">
            <summary>
            Crea una instancia de Emprendedor
            </summary>
            <param name="id">Id del emprendedor en Telegram.</param>
            <param name="nombre">Nombre de la empresa del emprendedor.</param>
            <param name="habilitaciones">Habilitaciones poseídas por el emprendedor.</param>
            <param name="ciudad">La ciudad donde se basa el emprendedor.</param>
            <param name="direccion">La direccion de la base de operaciones del emprendedor en la ciudad.</param>
            <param name="rubro">El rubro dentro del cual trabaja el emprendedor.</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.Emprendedor.PostularseAOferta(System.Collections.Generic.List{PII_E13.ClassLibrary.Oferta})">
            <summary>
            Mediante una oferta esté se postulará a ella.
            </summary>
            <param name="ofertas">Lista de ofertas a postularse.</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.Emprendedor.PostularseAOferta(PII_E13.ClassLibrary.Oferta)">
            <summary>
            Mediante una oferta esté se postulará a ella.
            </summary>
            <param name="oferta">Oferta a postularse.</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.Emprendedor.VerOfertasPostuladas(System.DateTime,System.DateTime)">
            <summary>
            Mediante una una fecha de inicio y de fin se obtienen todas las ofertas postuladas en ese periodo de tiempo.
            </summary>
            <param name="inicio">Fecha de inicio del periodo en el que se quiere buscar.</param>
            <param name="fin">Fecha de fin del periodo en el que se quiere buscar.</param>
            <returns>Una lista de ofertas a las cuales se postuló el Emprendedor.</returns>
        </member>
        <member name="M:PII_E13.ClassLibrary.Emprendedor.VerOfertasConsumidas(System.DateTime,System.DateTime)">
            <summary>
            Mediante palabras calve, un buscador y un canal se obtienen las ofertas consumidas por el Emprendedor.
            </summary>
            <param name="inicio">Fecha de inicio del periodo en el que se quiere buscar.</param>
            <param name="fin">Fecha de fin del periodo en el que se quiere buscar.</param>
            <returns>Una lista de ofertas consumidas por el Emprendedor.</returns>
        </member>
        <member name="T:PII_E13.ClassLibrary.Empresa">
            <summary> 
            Patrones y principios utilizados en esta clase:
            ISP ya que segmenta las operaciones de la interface en la persistencia.
            Creator ya que crea una instancia de oferta en esta clase con los parametros necesarios para ello.
            Expert ya que se le da la responsabilidad de generar las publicaciones, debido a que es la clase más experta de la información.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Empresa.Id">
            <summary>
            Id del usuario en el canal de registro.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Empresa.Ofertas">
            <summary>
            Id del usuario en el canal de registro.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Empresa.Ubicacion">
            <summary>
            Ubicación donde está basada la empresa.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Empresa.Rubro">
            <summary>
            Rubro al que pertenece la empresa.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Empresa.Nombre">
            <summary>
            Nombre comercial de la empresa.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Empresa.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Crea una instancia de Empresa.
            </summary>
            <param name="id">Id del usuario en el canal de registro.</param>
            <param name="ciudad">Ciudad donde está basada la empresa.</param>
            <param name="direccion">Direccion de la empresa.</param>
            <param name="rubro">Rubro al que pertenece la empresa.</param>
            <param name="nombre">Nombre comercial de la empresa.</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.Empresa.PublicarOferta(System.String,System.String,System.String,System.DateTime,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{PII_E13.ClassLibrary.Habilitacion})">
            <summary>
            Crea una nueva Oferta y la añade a la lista de ofertas de la empresa.
            </summary>
            <param name="id">El id único de la oferta generada.</param>
            <param name="fechaCierre">La fecha de cierre de la oferta.</param>
            <param name="etiquetas">Las etiquetas o palabras clave de la oferta.</param>
            <param name="habilitaciones">Las habilitaciones requeridas para tomar la oferta.</param>
            <param name="descripcion">La descripción de la oferta.</param>
            <param name="titulo">El titulo de la oferta.</param>
            <param name="disponibleConstantemente">Indica si la oferta está disponible constantemente o puntualmente.</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.Empresa.ActualizarOferta(PII_E13.ClassLibrary.Oferta)">
            <summary>
            </summary>
            <param name="oferta">la oferta que se desea modificar.</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.Empresa.VerOfertasPropias(System.DateTime,System.DateTime)">
            <summary>
            Muestra las ofertas publicadas por la empresa en una lista filtrada por fecha.
            </summary>
            <param name="inicio">Fecha de inicio del periodo en el que se quiere buscar.</param>
            <param name="fin">Fecha de fin del periodo en el que se quiere buscar.</param>
            <returns></returns>
        </member>
        <member name="M:PII_E13.ClassLibrary.Empresa.ObtenerOfertaPorId(System.String)">
            <summary>
            Recupera una oferta de la lista de ofertas utilizando su id y una id dada.
            </summary>
            <param name="id">Id de la oferta a recuperar.</param>
            <returns>La instancia de Oferta correspondiente a la id dada.</returns>
        </member>
        <member name="T:PII_E13.ClassLibrary.Encriptador">
            <summary>
            
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Encriptador.GetHashCode(System.String)">
            <summary>
            Clase encargada de generar un hash identificador para los objetos del sistema.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:PII_E13.ClassLibrary.Encriptador.GetHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Metodo privado que se encarga de crear el hash en base un input determinado.
            fuente de documentacion de .NET
            https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hashalgorithm.computehash?view=net-5.0
            </summary>
            <param name="hashAlgorithm"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:PII_E13.ClassLibrary.Habilitacion">
            <summary>
            Esta clase respresenta los datos basicos y necesarios de una Habilitación.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Habilitacion.Descripcion">
            <summary>
            Se indica el <value>descripcion</value> de la Habiltiacion.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Habilitacion.NombreInsitucionHabilitada">
            <summary>
            Se indica el <value>nombreInsitucionHabilitada</value> de la Habiltiacion.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Habilitacion.FechaTramite">
            <summary>
            Se indica la <value>fechaTramite</value> de la Habiltiacion.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Habilitacion.FechaVencimiento">
            <summary>
            Se indica la <value>fechaVencimiento</value> de la Habiltiacion.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Habilitacion.Vigente">
            <summary>
            Se indica si la Habilitacion está <value>vigente</value>.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Habilitacion.#ctor(System.String,System.String,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Crea una instancia de Habilitacion.
            </summary>
            <param name="descripcion">Descripcion de la Habilitacion.</param>
            <param name="nombreInsitucionHabilitada">Nombre de la institución que habilitó la habilitación.</param>
            <param name="fechaTramite">Fecha de Tramite de la Habilitacion.</param>
            <param name="fechaVencimiento">Fecha de Vencimiento de la Habilitacion.</param>
            <param name="vigente">Indica si la Habilitacion está vigente.</param>
        </member>
        <member name="T:PII_E13.ClassLibrary.IAdaptadorLocacion">
            <summary>
            Interfaz utilizada para desacoplar la implementación 
            de la clase AdaptadorLocacion utilizando el patron, adapter.
            logrando que la clase en la ubicacion no tenga que conocer la implementacion 
            de la clase AdaptadorLocacion quien se comunica con la libreria brindada por los profesores.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.IAdaptadorLocacion.ObtenerDistancia(PII_E13.ClassLibrary.Ubicacion,PII_E13.ClassLibrary.Ubicacion)">
            <summary>
            
            </summary>
            <param name="primaria"></param>
            <param name="secundaria"></param>
            <returns></returns>
        </member>
        <member name="T:PII_E13.ClassLibrary.ICallBack">
            <summary>
            Representa una respuesta de callback enviado por un usuario a través de una plataforma de mensajería.
            Se aplica el patrón Adapter para desacoplar la información recibida a través de las APIs y almacenarla en instancias de clases que implementen a esta interfaz.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.ICallBack.IdChat">
            <summary>
            Id del chat en el que fue enviado el callback.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.ICallBack.IdUsuario">
            <summary>
            Id del usuario remitente.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.ICallBack.Texto">
            <summary>
            Contenido en texto del callback.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.ICallBack.IdMensaje">
            <summary>
            Id del mensaje al cual el callback fue enviado como respuesta.
            </summary>
        </member>
        <member name="T:PII_E13.ClassLibrary.IMensaje">
            <summary>
            Representa un mensaje enviado por un usuario a través de una plataforma de mensajería.
            Se aplica el patrón Adapter para desacoplar la información recibida a través de las APIs y almacenarla en instancias de clases que implementen a esta interfaz.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.IMensaje.IdChat">
            <summary>
            Id del chat en el que fue enviado el mensaje.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.IMensaje.IdUsuario">
            <summary>
            Id del usuario remitente.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.IMensaje.Texto">
            <summary>
            Contenido en texto del mensaje.
            </summary>
        </member>
        <member name="T:PII_E13.ClassLibrary.IPersistencia">
            <summary>
            Esta es la interface de percisitencia de la aplicacion. su funcion es guardar y recuperar los datos de la aplicacion.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.IPersistencia.EscribirArchivo(System.String,System.String)">
            <summary>
            Guarda el archivo en la ruta especificada.
            </summary>
            <param name="ruta">La ruta del archivo en el sistema.</param>
            <param name="informacion">La información a guardar en el archivo en un string.</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.IPersistencia.LeerArchivo(System.String)">
            <summary>
            Lee un archivo en el sistema.
            </summary>
            <param name="ruta">La ruta del archivo en el sistema.</param>
            <returns>Retorna la información contenida en un archivo en un string.</returns>
        </member>
        <member name="T:PII_E13.ClassLibrary.IRespuesta">
            <summary>
            Interfaz que representa una respuesta a un mensaje.
            DOCUMENTAR PATRONES APLICADOS
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.IRespuesta.Texto">
            <summary>
            Texto del mensaje de la respuesta.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.IRespuesta.EditarMensaje">
            <summary>
            Indica si el último mensaje debe ser editado, de ser posible.
            </summary>
        </member>
        <member name="T:PII_E13.ClassLibrary.Material">
            <summary>
            Principios y patrones aplicados:
            Principio ISP: no hay objetos forzados a depender de otros objetos que no usan. 
            Principio SRP: tiene responsabilidad sobre una única parte de la funcionalidad, quedando completamente encapsulada dentro de la clase.
            Procurando que la clase tenga solo una razón para cambiar. 
            Patrón OCP: la clase es abierta a la extensión mediante herencia y/o composición, pero cerrada a cambios ya que no es posible y no es necesario realizar cambios en su código.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Material.#ctor(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            La clase material se encarga de conocer lo relativo al material que consituye el producto.
            </summary>
            <param name="nombre">nombre del material</param>
            <param name="categorias">categorias dentro de las que esta el material</param>
            <param name="unidadEstandar">unidad Estandar con la que se mide el material</param>
        </member>
        <member name="P:PII_E13.ClassLibrary.Material.Nombre">
            <summary>
            Nombre del material.
            </summary>
            <value></value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Material.Categorias">
            <summary>
            Categorías en las que esta incluido el material.
            </summary>
            <value></value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Material.UnidadEstandar">
            <summary>
            Unidad en la que se mide el material.
            </summary>
            <value></value>
        </member>
        <member name="T:PII_E13.ClassLibrary.Oferta">
            <summary>
             Patrones y principios aplicados:
             Principio EXPERT: ya que se le asignaron sus responsabilidades en su calidad
             de experto en la información, por ser la clase que tiene la información necesaria
             para poder cumplir con la tarea, mientras que se mantiene la encapsulación 
             ya que utiliza su propia información para cumplir con las responsabilidades.
             Patrón Low Coupling: ya que al asignársele responsabilidades a 
             la clase se buscó que el acoplamiento se mantuviera bajo al no depender de muchas 
             otras clases.
             Patrón High Cohesión: ya que las responsabilidades de la clase están
             fuertemente relacionadas, creando así una clase robusta y fácil de entender. 
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Oferta.#ctor(System.String,PII_E13.ClassLibrary.Empresa,System.DateTime,System.Collections.Generic.List{System.String},System.Collections.Generic.List{PII_E13.ClassLibrary.Habilitacion},System.String,System.String,System.Boolean)">
            <summary>
             La clase Oferta se encarga de conocer todo lo relativo a la Oferta.
            </summary>
            <param name="id"> Un número identificador para referenciar la oferta a lo largo del sistema </param>
            <param name="empresa"> Empresa que publica la oferta </param>
            <param name="fechaCierre"> Fecha de cierre, límite para postularse a la oferta.</param>
            <param name="etiquetas">Etiquetas relacionadas a la oferta que sirven para agruparlas o clasificarlas</param>
            <param name="habilitaciones">Habilitaciones requeridas por la empresa para postularse a atender la oferta</param>
            <param name="descripcion">Descripcion realizada por la empresa</param>
            <param name="titulo">Titulo bajo el cual se publica la oferta</param>
            <param name="disponibleConstantemente">Para definir si una oferta es recurrente.</param>
        </member>
        <member name="T:PII_E13.ClassLibrary.Oferta.Estados">
            <summary>
            Lista de estados posibles en que se puede encontrar una Oferta.
            </summary>
        </member>
        <member name="F:PII_E13.ClassLibrary.Oferta.Estados.Habilitada">
            <summary>
            Se le asigna a una oferta para indicar que esta vigente.
            </summary>
            <value>Habilitada indica que esta vigente</value>
        </member>
        <member name="F:PII_E13.ClassLibrary.Oferta.Estados.Cerrada">
            <summary>
            Se le asigna a una oferta para indicar que ya está cerrada y no es posible posularse.
            </summary>
            <value>Cerrada indica que no esta activa una oferta por haber sido adjudicada o por haber llegado a su fecha límite.</value>
        </member>
        <member name="F:PII_E13.ClassLibrary.Oferta.Estados.Suspendida">
            <summary>
            Se le asigna a una oferta para indicar que por algún motivo no esta disponible la oferta.
            </summary>
        </member>
        <member name="F:PII_E13.ClassLibrary.Oferta.Estados.Entregada">
            <summary>
            Se le asigna a una oferta para indicar que fue entregada a un Emprendedor.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.Id">
            <summary>
            Es una string que identifica a la oferta y que permite referenciarla a lo largo del sitema.
            </summary>
            <value>Id es el identificador único de la oferta.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.Empresa">
            <summary>
            Empresa es quién publica la oferta.
            </summary>
            <value>Empresa es quién publica la oferta</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.FechaCreada">
            <summary>
            Fecha en que se publica la oferta.
            </summary>
            <value>Fecha en que se publica la oferta.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.FechaCierre">
            <summary>
            Fecha límite para postularse a la oferta.
            </summary>
            <value>FechaCierre es la fecha límite para postularse a la oferta.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.Etiquetas">
            <summary>
            Son etiquetas que permiten categorizar la oferta para mostrarla agrupadas junto a otras que compartan la misma etiqueta.
            </summary>
            <value>Etiquetas permite categorizar la oferta.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.Estado">
            <summary>
            Estado indica cuál es la situación actual de una Oferta.
            </summary>
            <value>Estado indica si una oferta esta habilitada, cerrada o suspendida.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.Habilitaciones">
            <summary>
            Indica cuáles son las habilitaciones que exige la empresa para postularse a la oferta.
            </summary>
            <value>Habilitaciones exigidas por al empresa.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.ValorUSD">
            <summary>
            Valor en dólares USA que la empresa ofresa en pago por la realización de la tarea que implica la oferta.
            </summary>
            <value> ValorUSD es el valor en dólares USA definido por la empresa que publica la oferta.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.ValorUYU">
            <summary>
            ValorUY es el valor en pesos uruguayos definido por la empresa que publica la oferta.
            </summary>
            <value>ValorUY es el valor en pesos uruguayos definido por la empresa que publica la oferta.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.Descripcion">
            <summary>
            Es la descripción que hace la empresa para describir la oferta al publicarla.
            </summary>
            <value>Descripcion que hace la empresa</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.Titulo">
            <summary>
            Titulo bajo el que se publica la oferta.
            </summary>
            <value>Titulo bajo el que se publica la oferta.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.Productos">
            <summary>
            Productos es la lista de productos que componen la oferta.
            </summary>
            <value>Productos es la lista de productos que componen la oferta.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.DisponibleConstantemente">
            <summary>
            Una propiedad que indica si la oferta es recurrente.
            </summary>
            <value>Una propiedad que indica si la oferta es recurrente.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Oferta.EmprendedoresPostulados">
            <summary>
            EmprendedoresPostulados es la lista de los emprendedores que se han postulado para la oferta.
            </summary>
            <value>EmprendedoresPostulados es la lista de los emprendedores que se han postulado para la oferta.</value>
        </member>
        <member name="M:PII_E13.ClassLibrary.Oferta.AgregarProducto(PII_E13.ClassLibrary.Material,System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Agrega un producto a la lista de productos.
            </summary>
            <param name="material">Material que conforma al producto.</param>
            <param name="ciudad">Ciudad en la que se encuentra la oferta.</param> 
            <param name="direccion">Dirección dentro de la Ciudad en la que se encuentra la oferta.</param>      
            <param name="cantidadEnUnidades">Cantidad de unidades</param>
            <param name="valorUYU">Valor en pesos uruguayos.</param>
            <param name="valorUSD">Valor en dolares usa.</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.Oferta.RemoverProducto(PII_E13.ClassLibrary.Producto)">
            <summary>
            Quita un producto de la lista.
            </summary>
            <param name="producto">Detalle del producto a quitar de la lista.</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.Oferta.Redactar">
            <summary>
            Métodos para publicar los mensajes relativos a las ofertas.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Oferta.RedactarResumen">
            <summary>
            Métodos para publicar los mensajes relativos a las ofertas en versión resumida.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Oferta.RedactarPostulados">
            <summary>
            Un método para listar todos los emprendedores postulados a una oferta.
            </summary>
        </member>
        <member name="T:PII_E13.ClassLibrary.Producto">
            <summary>
            Clase que representa un Producto dentro del dominio del problema.
            Un Producto representa una instancia de venta de un Material, conteniendo su cantidad en su unidad específica,
            un valor en UYU y otro en dólares asignados por su vendedor y la ubicación donde se almacena.
            Se aplica el patrón de SRP y se obtiene una alta cohesión dentro de la clase Producto,
            al asignarle únicamente las responsabilidades de contener información sobre un producto y redactarla adecuadamente,
            enfocando sus propiedades y métodos para estos objetivos.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Producto.#ctor(PII_E13.ClassLibrary.Material,System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Crea una instancia de Producto.
            </summary>
            <param name="material">Material que compone al producto.</param>
            <param name="ciudad">Ciudad en la que está localizado el producto.</param>
            <param name="direccion">Direccion en la que está localizado el producto.</param>
            <param name="cantidadEnUnidad">Cantidad del producto en la unidad estándar de su material.</param>
            <param name="valorUYU">Valor en pesos uruguayos del producto.</param>
            <param name="valorUSD">Valor en dolares del producto.</param>
        </member>
        <member name="P:PII_E13.ClassLibrary.Producto.Material">
            <summary>
            Instancia de material correspondiente al material ofrecido dentro de un producto,
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Producto.Ubicacion">
            <summary>
            Instancia de ubicacion correspondiente a la ubicacion donde se almacena el producto.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Producto.CantidadEnUnidad">
            <summary>
            Cantidad del material en su unidad especifica.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Producto.ValorUYU">
            <summary>
            Valor en pesos uruguayos del producto.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Producto.ValorUSD">
            <summary>
            Valor en dólares estadounidenses del producto.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Producto.Redaccion">
            <summary>
            Redaccion del producto formateada.
            </summary>
        </member>
        <member name="T:PII_E13.ClassLibrary.Respuesta">
            <summary>
            Clase que representa una respuesta a un mensaje.
            DOCUMENTAR PATRONES APLICADOS
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Respuesta.#ctor(System.String,System.Boolean)">
            <summary>
            Crea una instancia de <see cref="T:PII_E13.ClassLibrary.Respuesta"/> con un texto asignado y la indicación explícita
            sobre si se debe editar el último mensaje.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Respuesta.#ctor(System.String)">
            <summary>
            Crea una instancia de <see cref="T:PII_E13.ClassLibrary.Respuesta"/> con un texto asignado.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Respuesta.Texto">
            <summary>
            Texto del mensaje de la <see cref="T:PII_E13.ClassLibrary.Respuesta"/>.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Respuesta.EditarMensaje">
            <summary>
            Indica si el último mensaje debe ser editado, de ser posible.
            </summary>
        </member>
        <member name="T:PII_E13.ClassLibrary.RespuestaTelegram">
            <summary>
            Clase que representa una respuesta a un mensaje de Telegram.
            DOCUMENTAR PATRONES APLICADOS
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.RespuestaTelegram.#ctor(System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup)">
            <summary>
            Crea una instancia de <see cref="T:PII_E13.ClassLibrary.RespuestaTelegram"/> con un texto y un teclado de tipo
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> asignados.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.RespuestaTelegram.#ctor(System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Boolean)">
            <summary>
            Crea una instancia de <see cref="T:PII_E13.ClassLibrary.RespuestaTelegram"/> con un texto, un teclado de tipo
            <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> asignados y una indicación explícita sobre si debe editarse el último mensaje.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.RespuestaTelegram.#ctor(System.String)">
            <summary>
            Crea una instancia de <see cref="T:PII_E13.ClassLibrary.RespuestaTelegram"/> con un texto asignado.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.RespuestaTelegram.#ctor(System.String,System.Boolean)">
            <summary>
            Crea una instancia de <see cref="T:PII_E13.ClassLibrary.RespuestaTelegram"/> con un texto asignado y la indicación explícita 
            sobre si se debe editar el último mensaje.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.RespuestaTelegram.TecladoTelegram">
            <summary>
            Teclado de botones predefinidos para Telegram.
            </summary>
            <value> Instancia de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> con botones definidos</value>
        </member>
        <member name="T:PII_E13.ClassLibrary.Rubro">
            <summary>
            Esta clase respresenta los datos basicos y necesarios de los rubros.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Rubro.Nombre">
            <summary>
            Se indica el nombre <value>rubro</value> del rubro
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Rubro.#ctor(System.String)">
            <summary>
            Se indica el nombre <value>rubro</value> del rubro
            </summary>
            <param name="rubro">rubro</param>        
        </member>
        <member name="T:PII_E13.ClassLibrary.Sistema">
            <summary>
            Esta clase representa al sistema principal de la aplicación. Permite registrar usuarios como Empresas
            o Emprendedores y actúa como un contenedor de los mismos.
            Se aplica el patrón Singleton dentro de esta clase para permitir solo la creación y utilización
            de una instancia de Sistema. Además, utilizamos el principio Creator para definir a Sistema como una
            clase creadora de empresas y emprendedores, ya que está compuesta por ellos. Esto le permite a Sistema
            actuar como el contenedor de información principal de la aplicación.
            Enfocando de esta forma a la clase de Sistema, buscamos también aumentar la cohesión de la misma y 
            lograr el patrón de SRP.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Sistema.#ctor">
            <summary>
            Crea una instancia de <see cref="T:PII_E13.ClassLibrary.Sistema"/>.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Sistema.RegistrarEmpresa(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Registra una nueva <see cref="T:PII_E13.ClassLibrary.Empresa"/> en el sistema.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Sistema.RegistrarEmprendedor(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{PII_E13.ClassLibrary.Habilitacion})">
            <summary>
            Registra un nuevo <see cref="T:PII_E13.ClassLibrary.Emprendedor"/> en el sistema.
            </summary>
        </member>
        <member name="M:PII_E13.ClassLibrary.Sistema.ObtenerEmpresaPorId(System.String)">
            <summary>
            Recupera una empresa de la lista de empresas utilizando su id y una id dada.
            </summary>
            <param name="id">Id de la empresa a recuperar.</param>
            <returns>La instancia de <see cref="T:PII_E13.ClassLibrary.Empresa"/> correspondiente a la id dada.</returns>
        </member>
        <member name="M:PII_E13.ClassLibrary.Sistema.ObtenerEmprendedorPorId(System.String)">
            <summary>
            Recupera un emprendedor de la lista de emprendedores utilizando su id y una id dada.
            </summary>
            <param name="id">Id del emprendedor a recuperar.</param>
            <returns>La instancia de <see cref="T:PII_E13.ClassLibrary.Emprendedor"/> correspondiente a la id dada.</returns>
        </member>
        <member name="P:PII_E13.ClassLibrary.Sistema.Empresas">
            <summary>
            Lista de empresas registradas en el sistema.
            </summary>
            <value>Colección de instancias de <see cref="T:PII_E13.ClassLibrary.Empresa"/></value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Sistema.Emprendedores">
            <summary>
            Lista de emprendedores registrados en el sistema.
            </summary>
            <value>Colección de instancias de <see cref="T:PII_E13.ClassLibrary.Emprendedor"/></value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Sistema.Materiales">
            <summary>
            Lista de materiales registrados en el sistema.
            </summary>
            <value>Colección de instancias de <see cref="T:PII_E13.ClassLibrary.Material"/></value>
        </member>
        <member name="P:PII_E13.ClassLibrary.Sistema.Instancia">
            <summary>
            Instancia del sistema durante la ejecución. Se aplica el patrón Singleton.
            </summary>
            <value>Una única instancia de <see cref="T:PII_E13.ClassLibrary.Sistema"/></value>
        </member>
        <member name="T:PII_E13.ClassLibrary.TelegramBot">
            <summary>
            Clase que representa un bot de Telegram.
            Se aplica el patrón de Adapter para definir una clase que funcione como adaptador entre nuestra solución y la API de Telegram.
            También se aplica el patrón de diseño Singleton para que sólo exista una instancia de la clase.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.TelegramBot.Cliente">
            <summary>
            Cliente de la API de Telegram.
            </summary>
            <value>Un cliente de la API de Telegram que extiende a la interfaz <see cref="T:Telegram.Bot.ITelegramBotClient"/>.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.TelegramBot.IdBot">
            <summary>
            Identificador único del bot en Telegram.
            </summary>
            <value>Número entero correspondiente al identificador único en Telegram del bot.</value>
        </member>
        <member name="P:PII_E13.ClassLibrary.TelegramBot.NombreBot">
            <summary>
            Nombre del bot en Telegram.
            </summary>
            <value>Cadena de caracteres correspondiente al nombre en Telegram del bot.</value>
        </member>
        <member name="F:PII_E13.ClassLibrary.TelegramBot.BotonListo">
            <summary>
            Instancia de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> predefinida para representar a un botón con texto y callback "Listo".
            </summary>
            <value>Instancia de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> con texto y callback "Listo".</value>
        </member>
        <member name="F:PII_E13.ClassLibrary.TelegramBot.BotonCancelar">
            <summary>
            Instancia de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> predefinida para representar a un botón con texto y callback "Cancelar".
            </summary>
            <value>Instancia de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> con texto y callback "Cancelar".</value>
        </member>
        <member name="F:PII_E13.ClassLibrary.TelegramBot.BotonSiguiente">
            <summary>
            Instancia de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> predefinida para representar a un botón con texto y callback "Siguiente".
            </summary>
            <value>Instancia de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> con texto y callback "Siguiente".</value>
        </member>
        <member name="F:PII_E13.ClassLibrary.TelegramBot.BotonAnterior">
            <summary>
            Instancia de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> predefinida para representar a un botón con texto y callback "Anterior".
            </summary>
            <value>Instancia de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> con texto y callback "Anterior".</value>
        </member>
        <member name="M:PII_E13.ClassLibrary.TelegramBot.ObtenerBotones(System.Collections.Generic.List{System.String})">
            <summary>
            Genera y retorna una lista de botones de Telegram a partir de una lista de opciones.
            </summary>
            <param name="opciones">La lista de opciones con las cuales crear los botones.</param>
            <returns>Una lista de <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton"/> conteniendo botones con las opciones recibidas por parámetros.</returns>
        </member>
        <member name="M:PII_E13.ClassLibrary.TelegramBot.ObtenerKeyboard(System.Collections.Generic.List{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton},System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{System.Collections.Generic.List{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton}})">
            <summary>
            Genera y retorna un teclado de Telegram (<see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/>) con una lista de botones, un índice
            índice de la lista a partir del cual iniciar y la cantidad de columnas y filas de botones a mostrar.
            </summary>
            <param name="botones">La lista de instancias de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> con la cual se quiere generar un teclado.</param>
            <param name="indice">El índice de la lista desde el cual iniciar. Se define a 0 por defecto.</param>
            <param name="columnas">La cantidad de columnas de botones a incluir. Se define a 1 por defecto.</param>
            <param name="filas">La cantidad de filas de botones a incluir. Se define a 1 por defecto.</param>
            <param name="botonesFijos">Matriz de <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> fijos opcional para mostrar al final del teclado.</param>
            <returns></returns>
        </member>
        <member name="P:PII_E13.ClassLibrary.TelegramBot.Instancia">
            <summary>
            Obtiene una instancia de la clase <see cref="T:PII_E13.ClassLibrary.TelegramBot"/>.
            </summary>
            <value>Instancia de la clase <see cref="T:PII_E13.ClassLibrary.TelegramBot"/>.</value>
        </member>
        <member name="T:PII_E13.ClassLibrary.Ubicacion">
            <summary>
            Patrones y principios utilizados en esta clase:
            ISP ya que segmenta las operaciones de la interface en la persistencia.
            Expert ya que se le da la responsabilidad de gestionar las coordenas de una ubicacion, debido a que es la clase más experta de la información.
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Ubicacion.Ciudad">
            <summary>
            Nombre de la ciudad de la ubicación
            </summary>
        </member>
        <member name="P:PII_E13.ClassLibrary.Ubicacion.Direccion">
            <summary>
            Dirección correspondiente a la ubicación
            </summary>
            <value></value>
        </member>
        <member name="M:PII_E13.ClassLibrary.Ubicacion.#ctor(System.String,System.String)">
            <summary>
            Crea una instancia de la clase Ubicacion
            </summary>
            <param name="ciudad">Ciudad</param>
            <param name="direccion">Dirección</param>
        </member>
        <member name="M:PII_E13.ClassLibrary.Ubicacion.Redactar">
            <summary>
            Genera una cadena de texto con la información de la ubicación
            </summary>
            <returns>Retorna un string con la ubicación formateada</returns>
        </member>
        <member name="M:PII_E13.ClassLibrary.Ubicacion.ObtenerDistancia(PII_E13.ClassLibrary.Ubicacion)">
            <summary>
            Delega la responsabilidad de calcular la distancia al gestor.
            </summary>
            <param name="target">Distancia objectivo</param>
            <returns></returns>
        </member>
        <member name="T:PII_E13.HandlerLibrary.HandlerBase">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:PII_E13.HandlerLibrary.HandlerBase.Siguiente">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:PII_E13.HandlerLibrary.HandlerBase.Etiquetas">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.#ctor(PII_E13.HandlerLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:PII_E13.HandlerLibrary.HandlerBase"/>.
            </summary>
            <param name="siguiente">El próximo "handler".</param>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.#ctor(System.String[],PII_E13.HandlerLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:PII_E13.HandlerLibrary.HandlerBase"/> con una lista de comandos.
            </summary>
            <param name="etiquetas">La lista de comandos.</param>
            <param name="siguiente">El próximo "handler".</param>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.ResolverInterno(PII_E13.ClassLibrary.IMensaje,PII_E13.ClassLibrary.RespuestaTelegram@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.ResolverInterno(PII_E13.ClassLibrary.ICallBack,PII_E13.ClassLibrary.RespuestaTelegram@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="callback">El callback a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.CancelarInterno">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.PuedeResolver(PII_E13.ClassLibrary.IMensaje)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:PII_E13.HandlerLibrary.HandlerBase.Etiquetas"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.PuedeResolver(PII_E13.ClassLibrary.ICallBack)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:PII_E13.HandlerLibrary.HandlerBase.Etiquetas"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="callback">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.Resolver(PII_E13.ClassLibrary.IMensaje,PII_E13.ClassLibrary.RespuestaTelegram@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.Resolver(PII_E13.ClassLibrary.ICallBack,PII_E13.ClassLibrary.RespuestaTelegram@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="callback">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.HandlerBase.Cancelar">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PII_E13.HandlerLibrary.IHandler" -->
        <member name="P:PII_E13.HandlerLibrary.IHandler.Siguiente">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:PII_E13.HandlerLibrary.IHandler.Resolver(PII_E13.ClassLibrary.IMensaje,PII_E13.ClassLibrary.RespuestaTelegram@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.IHandler.Resolver(PII_E13.ClassLibrary.ICallBack,PII_E13.ClassLibrary.RespuestaTelegram@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="callBack">El callback a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.IHandler.Cancelar">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:PII_E13.HandlerLibrary.PostularseAOfertaHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:PII_E13.HandlerLibrary.PostularseAOfertaHandler.Busquedas">
            <summary>
            Diccionario utilizado para contener todas las búsquedas que se están realizando por los usuarios.
            Se identifica al usuario por su id en una plataforma y se guarda una instancia de <see cref="T:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion"/>.
            </summary>
            <value>Diccionario de instancias de <see cref="T:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion"/> identificadas por ids de usuarios en string</value>
        </member>
        <member name="M:PII_E13.HandlerLibrary.PostularseAOfertaHandler.#ctor(PII_E13.HandlerLibrary.HandlerBase)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:PII_E13.HandlerLibrary.PostularseAOfertaHandler"/>. 
            Esta clase procesa la postulación a una oferta.
            </summary>
        </member>
        <member name="M:PII_E13.HandlerLibrary.PostularseAOfertaHandler.ResolverInterno(PII_E13.ClassLibrary.IMensaje,PII_E13.ClassLibrary.RespuestaTelegram@)">
            <summary>
            La clase procesa el mensaje y retorna true o no lo procesa y retorna false.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.PostularseAOfertaHandler.ResolverInterno(PII_E13.ClassLibrary.ICallBack,PII_E13.ClassLibrary.RespuestaTelegram@)">
            <summary>
            La clase procesa el mensaje y retorna true o no lo procesa y retorna false.
            </summary>
            <param name="callback">El callback a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.PostularseAOfertaHandler.CancelarInterno(System.String)">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:PII_E13.HandlerLibrary.PostularseAOfertaHandler.PuedeResolver(PII_E13.ClassLibrary.IMensaje)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:PII_E13.HandlerLibrary.HandlerBase.Etiquetas"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.PostularseAOfertaHandler.PuedeResolver(PII_E13.ClassLibrary.ICallBack)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:PII_E13.HandlerLibrary.HandlerBase.Etiquetas"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="callback">El callback a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:PII_E13.HandlerLibrary.PostularseAOfertaHandler.Cancelar(System.String)">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:PII_E13.HandlerLibrary.PostularseAOfertaHandler.Estados">
            <summary>
            Representación de los posibles estados de una postulación a oferta.
            </summary>
        </member>
        <member name="T:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion">
            <summary>
            Clase privada contenedora de la información de una postulación a una oferta.
            </summary>
        </member>
        <member name="P:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion.Etiquetas">
            <summary>
            Lista de etiquetas que está usando un usuario para buscar una oferta.
            </summary>
        </member>
        <member name="P:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion.OfertasEncontradas">
            <summary>
            Lista de ofertas encontradas en la búsqueda de ofertas.
            </summary>
        </member>
        <member name="P:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion.Categorias">
            <summary>
            Lista de categorías que está usando un usuario para buscar una oferta.
            </summary>
        </member>
        <member name="P:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion.CategoriasDisponibles">
            <summary>
            Lista de categorías disponibles para elegir.
            </summary>
        </member>
        <member name="P:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion.Estado">
            <summary>
            Estado de la búsqueda de ofertas de un usuario.
            </summary>
        </member>
        <member name="P:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion.ofertaSeleccionada">
            <summary>
            Oferta seleccionada por un usuario entre la lista de ofertas encontradas.
            </summary>
        </member>
        <member name="P:PII_E13.HandlerLibrary.PostularseAOfertaHandler.InformacionPostulacion.IndiceActual">
            <summary>
            Indice actual dentro de cualquier lista paginada.
            </summary>
        </member>
        <member name="T:Ucu.Poo.Locations.Client.Distance">
            <summary>
            Representa la distancia entre las coordenas o las direcciones de origen y destino retornada en los métodos
            <see cref="M:Ucu.Poo.Locations.Client.LocationApiClient.GetDistanceAsync(Ucu.Poo.Locations.Client.Location,Ucu.Poo.Locations.Client.Location)"/> o
            <see cref="M:Ucu.Poo.Locations.Client.LocationApiClient.GetDistanceAsync(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Distance.Found">
            <summary>
            Indica si se encontraron o no las coordenas o las direcciones de origen y destino.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Distance.TravelDistance">
            <summary>
            La distancia entre las coordenadas o las direcciones de origen y destino.
            </summary>
            <value>La distancia en metros.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Distance.TravelDuration">
            <summary>
            El tiempo que se demora en llegar de las coordenadas o de las direcciones de origen a las de destino.
            </summary>
            <value>El tiempo que se demora en minutos.</value>
        </member>
        <member name="T:Ucu.Poo.Locations.Client.Location">
            <summary>
            Representa las coordenadas y otros datos de la ubicación de una dirección retornada en el método
            <see cref="M:Ucu.Poo.Locations.Client.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.Found">
            <summary>
            Indica si se encontró o no la dirección. En ese caso son válidos los demás valores. En caso contrario los
            demás valores son indeterminados.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.AddresLine">
            <summary>
            La dirección: calle y número, ruta y kilómetro, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.CountryRegion">
            <summary>
            El país.
            </summary>
            <value>Por ejemplo, Uruguay</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.FormattedAddress">
            <summary>
            La dirección completa, incluyendo ciudad, código postal, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738, Montevideo, 11200, Uruguay.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.Locality">
            <summary>
            La localidad o ciudad.
            </summary>
            <value>Por ejemplo, Montevideo</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.PostalCode">
            <summary>
            El código postal.
            </summary>
            <value>Por ejemplo, 11200</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.Latitude">
            <summary>
            La latitud de la dirección.
            </summary>
            <value>El valor de la latitud en formato decimal.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.Longitude">
            <summary>
            La longitud de la dirección.
            </summary>
            <value>El valor de la longitud en formato decimal.</value>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Obtiene las coordenadas de una dirección.
            </summary>
            <param name="address">La dirección.</param>
            <param name="city">La ciudad. Es opcional. El valor predeterminado es Montevideo.</param>
            <param name="department">El departamento, estado, provincia, etc. Es opcional. El valor predeterminado es `ontevideo.</param>
            <param name="country">El país. Es opcional. El valor predeterminado es Uruguay.</param>
            <returns>Las coordenadas de la dirección.</returns>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.GetDistanceAsync(Ucu.Poo.Locations.Client.Location,Ucu.Poo.Locations.Client.Location)">
            <summary>
            Obtiene la distancia entre dos coordenadas.
            </summary>
            <param name="from">La coordenada de origen.</param>
            <param name="to">La coordenada de destino.</param>
            <returns>La distancia entre las dos coordenadas.</returns>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.GetDistanceAsync(System.String,System.String)">
            <summary>
            Obtiene la distancia entre dos direcciones.
            </summary>
            <param name="from">La dirección de origen.</param>
            <param name="to">La dirección de destino.</param>
            <returns>La distancia entre las dos direcciones.</returns>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.DownloadMapAsync(System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Descarga una mapa de una coordenada.
            </summary>
            <param name="latitude">La latitud de la coordenada.</param>
            <param name="longitude">La longitud de la coordenada.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. El formato es PNG.</param>
            <param name="zoomLevel">El nivel de zoom del mapa entre 1 y 20. Es opcional. El valor predeterminado es
            15.</param>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.DownloadRouteAsync(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Un mapa con una ruta entre dos coordenadas.
            </summary>
            <param name="fromLatitude">La latitud de la coordenada de origen.</param>
            <param name="fromLongitude">La longitu de la coordenada de origen.</param>
            <param name="toLatitude">La latitud de la coordenada de destino.</param>
            <param name="toLongitude">La longitud de la coordenada de destino.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. Es formato es PNG.</param>
        </member>
    </members>
</doc>
